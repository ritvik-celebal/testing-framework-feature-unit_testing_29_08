name: Code Duplication Analysis

on:
  workflow_dispatch:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  duplication-analysis:
    name: "SonarQube Duplication Analysis"
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_HOME: /opt/sonar-scanner
      SONAR_USER_HOME: /opt/sonar-scanner/.sonar
    container:
      image: ghcr.io/msn-cloud-sa/sonar-scanner-cli:11.3.0
    
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: "Set up Python for notebook conversion"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.9"

      - name: "Install Jupyter for notebook conversion"
        run: |
          python -m pip install --upgrade pip
          pip install jupyter nbconvert

      - name: "Prepare files for duplication analysis"
        run: |
          echo "=== Preparing files for SonarQube duplication analysis ==="
          mkdir -p sonar_analysis
          
          echo "Copying Python source files..."
          find src -name "*.py" -type f | while IFS= read -r file; do
            echo "Processing: $file"
            relative_path="${file#src/}"
            target_dir="sonar_analysis/$(dirname "$relative_path")"
            mkdir -p "$target_dir"
            cp "$file" "sonar_analysis/$relative_path"
            echo "Copied: $file -> sonar_analysis/$relative_path"
          done
          
          echo "=== Converting Jupyter notebooks to Python files ==="
          find src -name "*.ipynb" -type f | while IFS= read -r file; do
            echo "Converting notebook: $file"
            relative_path="${file#src/}"
            relative_dir="$(dirname "$relative_path")"
            target_dir="sonar_analysis/$relative_dir"
            mkdir -p "$target_dir"
            
            # Convert notebook to python file
            if jupyter nbconvert --to python --output-dir="$target_dir" "$file" 2>/dev/null; then
              echo "Successfully converted: $file"
            else
              echo "Warning: Failed to convert $file, skipping..."
            fi
          done
          
          echo "=== Files prepared for duplication analysis ==="
          find sonar_analysis -type f \( -name "*.py" -o -name "*.ipynb" \) | sort
          echo "Total files: $(find sonar_analysis -type f \( -name "*.py" -o -name "*.ipynb" \) | wc -l)"

      - name: "Create SonarQube properties file"
        run: |
          cat > sonar-project.properties << EOF
          # Project identification
          sonar.projectKey=${{ github.repository_owner }}::${GITHUB_REPOSITORY##*/}
          sonar.projectName=${GITHUB_REPOSITORY##*/}
          sonar.projectVersion=1.0
          
          # Source code
          sonar.sources=sonar_analysis/
          
          # Language
          sonar.language=py
          
          # Duplication settings
          sonar.cpd.py.minimumtokens=50
          sonar.cpd.py.minimumlines=5
          
          # Exclusions
          sonar.cpd.exclusions=**/__pycache__/**,**/.*,**/*.pyc
          sonar.exclusions=**/__pycache__/**,**/.*,**/*.pyc,**/test_*,**/tests/**
          
          # Coverage exclusions (since this is duplication-only analysis)
          sonar.coverage.exclusions=**/*
          
          # Encoding
          sonar.sourceEncoding=UTF-8
          EOF
          
          echo "=== SonarQube Configuration ==="
          cat sonar-project.properties

      - name: "Extract repository name"
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: "Cache SonarScanner"
        uses: actions/cache@v4
        with:
          path: /opt/sonar-scanner/.sonar/cache
          key: ${{ runner.os }}-sonar-duplication-cache

      - name: "Run SonarQube duplication analysis"
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
        run: |
          echo "=== Pre-analysis verification ==="
          echo "Working directory: $(pwd)"
          echo "Files to be analyzed:"
          find sonar_analysis -type f \( -name "*.py" -o -name "*.ipynb" \) | head -10
          echo "Total Python files: $(find sonar_analysis -name "*.py" | wc -l)"
          echo "Total Jupyter files: $(find sonar_analysis -name "*.ipynb" | wc -l)"
          
          echo "=== Running SonarQube duplication analysis ==="
          sonar-scanner \
            -X \
            -Dsonar.verbose=true \
            -Dsonar.host.url=https://sonarqube.masangrouptech.com \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=false \
            -Dsonar.analysis.mode=preview \
            -Dsonar.issuesReport.html.enable=true

      - name: "Basic duplication threshold check"
        run: |
          echo "=== Code Duplication Threshold Check ==="
          
          # Count total lines in analysis files
          TOTAL_LINES=0
          if [ -d "sonar_analysis" ]; then
            TOTAL_LINES=$(find sonar_analysis -name "*.py" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          fi
          echo "Total lines analyzed: $TOTAL_LINES"
          
          # Simple duplication check using basic pattern matching
          DUPLICATE_LINES=0
          if [ "$TOTAL_LINES" -gt 0 ]; then
            # Find duplicate lines across files (excluding comments and empty lines)
            find sonar_analysis -name "*.py" -exec cat {} \; | \
            grep -v "^#" | grep -v "^$" | grep -v "^\s*$" | sort | uniq -d > /tmp/duplicates.txt || true
            
            if [ -f "/tmp/duplicates.txt" ] && [ -s "/tmp/duplicates.txt" ]; then
              DUPLICATE_LINES=$(wc -l < /tmp/duplicates.txt || echo "0")
              echo "Sample duplicate lines found:"
              head -5 /tmp/duplicates.txt || true
              rm -f /tmp/duplicates.txt
            fi
          fi
          
          # Calculate duplication percentage
          if [ "$TOTAL_LINES" -gt 0 ]; then
            DUPLICATION_PERCENT=$(( (DUPLICATE_LINES * 100) / TOTAL_LINES ))
          else
            DUPLICATION_PERCENT=0
          fi
          
          echo "Estimated duplicate lines: $DUPLICATE_LINES"
          echo "Estimated duplication percentage: ${DUPLICATION_PERCENT}%"
          echo "Maximum allowed duplication: 15%"
          
          # Set threshold based on project needs
          MAX_DUPLICATION=15
          
          if [ "$DUPLICATION_PERCENT" -gt "$MAX_DUPLICATION" ]; then
            echo "❌ DUPLICATION FAILURE: ${DUPLICATION_PERCENT}% exceeds maximum threshold of ${MAX_DUPLICATION}%"
            echo "Please review and reduce code duplication. Check SonarQube dashboard for detailed analysis."
            exit 1
          else
            echo "✅ DUPLICATION SUCCESS: ${DUPLICATION_PERCENT}% is within acceptable threshold of ${MAX_DUPLICATION}%"
          fi

      - name: "Generate duplication report summary"
        if: always()
        run: |
          echo "=== Duplication Analysis Summary ==="
          echo "📊 **Code Duplication Analysis Results**" > duplication_summary.md
          echo "" >> duplication_summary.md
          echo "- **Repository**: ${{ github.repository }}" >> duplication_summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> duplication_summary.md
          echo "- **Commit**: ${{ github.sha }}" >> duplication_summary.md
          echo "- **Analysis Date**: $(date)" >> duplication_summary.md
          echo "" >> duplication_summary.md
          
          TOTAL_FILES=$(find sonar_analysis -name "*.py" | wc -l)
          TOTAL_NOTEBOOKS=$(find sonar_analysis -name "*.ipynb" | wc -l)
          
          echo "- **Files Analyzed**: $TOTAL_FILES Python files, $TOTAL_NOTEBOOKS notebooks" >> duplication_summary.md
          echo "" >> duplication_summary.md
          echo "🔗 **View detailed results in SonarQube dashboard**" >> duplication_summary.md
          echo "" >> duplication_summary.md
          
          cat duplication_summary.md

      - name: "Upload analysis artifacts"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: duplication-analysis-results
          path: |
            sonar-project.properties
            duplication_summary.md
            .scannerwork/
          retention-days: 30

      - name: "Cleanup analysis directory"
        if: always()
        run: |
          echo "Cleaning up analysis directory..."
          rm -rf sonar_analysis
          echo "Cleanup completed"
